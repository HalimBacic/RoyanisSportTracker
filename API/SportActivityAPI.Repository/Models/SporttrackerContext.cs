// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SportActivityAPI.Repository.Models
{
    public partial class SporttrackerContext : DbContext
    {
        public SporttrackerContext()
        {
        }

        public SporttrackerContext(DbContextOptions<SporttrackerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<Activitytype> Activitytype { get; set; }
        public virtual DbSet<Logedusers> Logedusers { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserHasActivity> UserHasActivity { get; set; }
        public virtual DbSet<UserHasTarget> UserHasTarget { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8_general_ci")
                .HasCharSet("utf8");

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.UserId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("activity");

                entity.HasIndex(e => e.ActivityTypeId, "fk_Activity_ActivityType_idx");

                entity.HasIndex(e => e.UserId, "fk_Activity_User1_idx");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User_Id");

                entity.Property(e => e.ActivityTypeId).HasColumnName("ActivityType_Id");

                entity.Property(e => e.Description).HasMaxLength(45);

                entity.Property(e => e.Name).HasMaxLength(45);

                entity.HasOne(d => d.ActivityType)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.ActivityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Activity_ActivityType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Activity_User1");
            });

            modelBuilder.Entity<Activitytype>(entity =>
            {
                entity.ToTable("activitytype");

                entity.HasIndex(e => e.Name, "Name_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.Name).HasMaxLength(45);
            });

            modelBuilder.Entity<Logedusers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("logedusers");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Logtime).HasColumnName("logtime");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("user");

                entity.HasIndex(e => e.Email, "Email_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.Password, "Password_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.Username, "Username_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.Email).HasMaxLength(45);

                entity.Property(e => e.Password).HasMaxLength(256);

                entity.Property(e => e.Username).HasMaxLength(45);
            });

            modelBuilder.Entity<UserHasActivity>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ActivityId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("user_has_activity");

                entity.HasIndex(e => e.ActivityId, "fk_User_has_Activity_Activity1_idx");

                entity.HasIndex(e => e.UserId, "fk_User_has_Activity_User1_idx");

                entity.Property(e => e.UserId).HasColumnName("User_Id");

                entity.Property(e => e.ActivityId).HasColumnName("Activity_Id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserHasActivity)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_User_has_Activity_User1");
            });

            modelBuilder.Entity<UserHasTarget>(entity =>
            {
                entity.HasKey(e => new { e.DateActivity, e.Type, e.ActivityTypeId, e.UserId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.ToTable("user_has_target");

                entity.HasIndex(e => e.UserId, "fk_User_has_Activity1_User1_idx");

                entity.HasIndex(e => e.ActivityTypeId, "fk_User_has_target_ActivityType1_idx");

                entity.Property(e => e.Type).HasColumnType("enum('TimePerDay','DurationPerDay')");

                entity.Property(e => e.ActivityTypeId).HasColumnName("ActivityType_Id");

                entity.Property(e => e.UserId).HasColumnName("User_Id");

                entity.HasOne(d => d.ActivityType)
                    .WithMany(p => p.UserHasTarget)
                    .HasForeignKey(d => d.ActivityTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_User_has_target_ActivityType1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserHasTarget)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_User_has_Activity1_User1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}